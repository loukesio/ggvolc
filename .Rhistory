genes_table(data2 = attention_genes)
ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance")%>%
genes_table(data2 = attention_genes)
genes_table <- function(plot_obj, data2) {
# Select specific columns
selected_data <- data2[, c("genes", "baseMean", "log2FoldChange", "pvalue", "padj"), drop = FALSE]
# Define a custom theme for the table
custom_theme <- gridExtra::ttheme_default(
core = list(bg_params = list(fill = "white")),
colhead = list(
fg_params = list(col = "black"),
bg_params = list(fill = "white", col = "#333333", lwd = 1)
)
)
# Create the tableGrob with the custom theme
attention.genes.tbl <- gridExtra::tableGrob(selected_data, rows = NULL, theme = custom_theme)
combined_plot <- plot_obj / attention.genes.tbl
return(combined_plot)
}
ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance")%>%
genes_table(data2 = attention_genes)
genes_table <- function(plot_obj, data2) {
# Select specific columns
selected_data <- data2[, c("genes", "baseMean", "log2FoldChange", "pvalue", "padj"), drop = FALSE]
# Define a custom theme for the table
custom_theme <- gridExtra::ttheme_default(
core = list(bg_params = list(fill = "white")),
colhead = list(
fg_params = list(col = "black"),
bg_params = list(fill = "white", col = "#333333", lwd = 1)
)
)
# Create the tableGrob with the custom theme
attention.genes.tbl <- gridExtra::tableGrob(selected_data, rows = NULL, theme = custom_theme)
combined_plot <- plot_obj / attention.genes.tbl
return(combined_plot)
}
plot_obj <- ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance")%>%
genes_table(data2 = attention_genes)
genes_table <- function(plot_obj, data2) {
# Select specific columns
selected_data <- data2[, c("genes", "baseMean", "log2FoldChange", "pvalue", "padj"), drop = FALSE]
# Define a custom theme for the table
custom_theme <- ttheme_default(
core = list(bg_params = list(fill = "white")),
colhead = list(
fg_params = list(col = "black"),
bg_params = list(fill = "white", col = "#333333", lwd = 1)
)
)
# Create the tableGrob with the custom theme
attention.genes.tbl <- tableGrob(selected_data, rows = NULL, theme = custom_theme)
# Combine the two using grid.arrange and return
combined_plot <- arrangeGrob(plot_obj, attention.genes.tbl, ncol = 1)
return(combined_plot)
}
# Your desired one-liner
plot <- ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance") %>%
genes_table(data2 = attention_genes)
# To view the combined plot
grid::grid.draw(plot)
# Your desired one-liner
plot <- ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance") %>%
genes_table(data2 = attention_genes)
plot
genes_table <- function(plot_obj, data2) {
# Select specific columns
selected_data <- data2[, c("genes", "baseMean", "log2FoldChange", "pvalue", "padj"), drop = FALSE]
# Define a custom theme for the table
custom_theme <- ttheme_default(
core = list(bg_params = list(fill = "white")),
colhead = list(
fg_params = list(col = "black"),
bg_params = list(fill = "white", col = "#333333", lwd = 1)
)
)
# Create the tableGrob with the custom theme
attention.genes.tbl <- tableGrob(selected_data, rows = NULL, theme = custom_theme)
# Combine the two using grid.arrange and return
combined_plot <- arrangeGrob(plot_obj, attention.genes.tbl, ncol = 1)
return(combined_plot)
}
# Your desired one-liner
ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance") %>%
genes_table(data2 = attention_genes)
# Your desired one-liner
ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance")
genes_table <- function(plot_obj, data2) {
# Check if the input is a ggplot object
if (!inherits(plot_obj, "ggplot")) stop("Input must be a ggplot object")
# Select specific columns
selected_data <- data2[, c("genes", "baseMean", "log2FoldChange", "pvalue", "padj"), drop = FALSE]
# Define a custom theme for the table
custom_theme <- ttheme_default(
core = list(bg_params = list(fill = "white")),
colhead = list(
fg_params = list(col = "black"),
bg_params = list(fill = "white", col = "#333333", lwd = 1)
)
)
# Create the tableGrob with the custom theme
attention.genes.tbl <- tableGrob(selected_data, rows = NULL, theme = custom_theme)
# Combine the two using grid.arrange
combined_plot <- arrangeGrob(plot_obj, attention.genes.tbl, ncol = 1)
return(combined_plot)
}
# Create the volcano plot object first
volcano_plot <- ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance")
# Combine it with the table
combined_plot <- genes_table(volcano_plot, attention_genes)
# To view the combined plot
grid::grid.draw(combined_plot)
genes_table <- function(plot_obj, data2) {
# Check if the input is a ggplot object
if (!inherits(plot_obj, "ggplot")) stop("Input must be a ggplot object")
# Select specific columns
selected_data <- data2[, c("genes", "baseMean", "log2FoldChange", "pvalue", "padj"), drop = FALSE]
# Define a custom theme for the table
custom_theme <- ttheme_default(
core = list(bg_params = list(fill = "white")),
colhead = list(
fg_params = list(col = "black"),
bg_params = list(fill = "white", col = "#333333", lwd = 1)
)
)
# Create the tableGrob with the custom theme
attention.genes.tbl <- tableGrob(selected_data, rows = NULL, theme = custom_theme)
# Combine the two using grid.arrange
combined_plot <- arrangeGrob(plot_obj, attention.genes.tbl, ncol = 1)
return(combined_plot)
}
# Create the volcano plot object first
volcano_plot <- ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance")
# Combine it with the table
combined_plot <- genes_table(volcano_plot, attention_genes)
combined_plot
# Combine it with the table
combined_plot <- genes_table(volcano_plot, attention_genes)
combined_plot
# To view the combined plot
grid::grid.draw(combined_plot)
genes_table <- function(plot_obj, data2) {
# Check if the input is a ggplot object
if (!inherits(plot_obj, "ggplot")) stop("Input must be a ggplot object")
# Select specific columns
selected_data <- data2[, c("genes", "baseMean", "log2FoldChange", "pvalue", "padj"), drop = FALSE]
# Define a custom theme for the table
custom_theme <- ttheme_default(
core = list(bg_params = list(fill = "white")),
colhead = list(
fg_params = list(col = "black"),
bg_params = list(fill = "white", col = "#333333", lwd = 1)
)
)
# Create the tableGrob with the custom theme
attention.genes.tbl <- tableGrob(selected_data, rows = NULL, theme = custom_theme)
# Combine the two using grid.arrange
combined_plot <- arrangeGrob(plot_obj, attention.genes.tbl, ncol = 1)
return(combined_plot)
}
# Use the pipe to create and combine the plot and the table
combined_plot <- ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance") %>%
genes_table(data2 = attention_genes)
ggvolc <- function(data1,
data2 = NULL,
size_var = NULL,  # Default value set to NULL
p_value = 0.05,
fc = 1,
not_sig_color = "grey82",
down_reg_color = "#00798c",
up_reg_color = "#d1495b",
add_seg = FALSE,
table = "off"){
# Validate input
if(!is.data.frame(data1)) stop("data1 must be a data frame")
if(!is.null(data2) && !is.data.frame(data2)) stop("data2 must be a data frame")
# Calculate the size aesthetic outside ggplot
if(is.null(size_var)) {
data1$size_aes <- 3  # Default size if size_var is NULL
if(!is.null(data2)) data2$size_aes <- 3
size_aes_range <- c(3, 3)
} else if (size_var == "pvalue") {
data1$size_aes <- abs(-log10(data1$pvalue))
if(!is.null(data2)) data2$size_aes <- abs(-log10(data2$pvalue))
size_aes_range <- c(0, 6)
} else {
data1$size_aes <- abs(data1[[size_var]])
if(!is.null(data2)) data2$size_aes <- abs(data2[[size_var]])
size_aes_range <- c(min(abs(data1[[size_var]])), max(abs(data1[[size_var]])))
}
dat1 <- data1 %>%
dplyr::mutate(threshold = factor(case_when(
pvalue < p_value & log2FoldChange > fc ~ "s_upregulated",
pvalue < p_value & log2FoldChange < -fc ~ "s_downregulated",
TRUE ~ "not_significant"
), levels = c("not_significant", "s_downregulated", "s_upregulated")))
if (is.null(data2)) {
dat1.2 <- dat1
} else {
dat1.2 <- dplyr::anti_join(dat1, data2, by="genes")
}
color_mapping <- c("s_downregulated" = down_reg_color,
"not_significant" = not_sig_color,
"s_upregulated" = up_reg_color)
p <- ggplot2::ggplot(dplyr::arrange(dat1.2, threshold)) +
ggplot2::geom_point(aes(x = log2FoldChange, y = -log10(pvalue), color = threshold, size = size_aes),
shape = 16, alpha = 0.5) +
ggplot2::theme_bw() +
ggplot2::labs(title = "Exploring data with ggvolc",
x = "log2FoldChange",
y = "-log10(pvalue)") +
ggplot2::scale_color_manual(
values = color_mapping,
name = "Genes",
breaks = c("s_downregulated", "not_significant", "s_upregulated"),
labels = c("Downregulated", "non-significant", "Upregulated")
)  +
ggplot2::guides(color = ggplot2::guide_legend(override.aes = list(size = 5, alpha=1)))
if (!is.null(data2)) {
data2 <- data2 %>%
dplyr::mutate(threshold = factor(case_when(
pvalue < p_value & log2FoldChange > fc ~ "s_upregulated",
pvalue < p_value & log2FoldChange < -fc ~ "s_downregulated",
TRUE ~ "not_significant"
),levels = c("not_significant", "s_downregulated", "s_upregulated")))
p <- p + ggplot2::geom_point(data = data2, aes(x = log2FoldChange, y = -log10(pvalue),
fill = threshold, size = size_aes),
shape = 21, color = "black") +
ggplot2::scale_fill_manual(
values = color_mapping,
name = "Genes",
breaks = c("s_downregulated", "not_significant", "s_upregulated"),
labels = c("Downregulated", "non-significant", "Upregulated"),
guide = "none"
)
p <- p + ggrepel::geom_text_repel(data = data2,
aes(x = log2FoldChange, y = -log10(pvalue),
label = genes), color = "#333333", fontface="bold",
segment.curvature = -0.4,
segment.alpha = 0.5)
}
if (is.null(size_var)) {
p <- p + scale_size_continuous(guide = "none")  # No legend for size when size_var is NULL
} else {
size_legend_name <- ifelse(size_var == "log2FoldChange", "log2FoldChange", "-log10(pvalue)")
p <- p + scale_size_continuous(name = size_legend_name,
range = size_aes_range) +
guides(size = guide_legend(override.aes = list(shape = 21, fill = NA)))
}
p <- p +
ggplot2::theme_bw() +
ggplot2::theme(
axis.text = ggplot2::element_text(size=14),
axis.text.x = ggplot2::element_text(margin = margin(t = 2.5, r =0, b = 0, l = 0)),
axis.text.y = ggplot2::element_text(margin = margin(t = 0, r =2.5, b = 0, l = 0)),
axis.ticks.length.x = grid::unit(0.25,"cm"),
axis.ticks.length.y = grid::unit(0.25,"cm"),
axis.ticks = ggplot2::element_line(color = "#333333", linewidth= .5),
axis.title = ggplot2::element_text(size=15),
panel.grid.major = ggplot2::element_line(color="grey93"),
panel.grid.minor =ggplot2::element_line(color=NA),
panel.border = ggplot2::element_rect(linewidth = 1, color="#333333"),
legend.title = ggplot2::element_text(hjust=0.5, size=12),
legend.text = ggplot2::element_text(size=10),
plot.title = ggtext::element_markdown(color = "#333333", size = 18, face = "bold", margin = margin(0,0,0.5,0, unit = "cm"), hjust=0.5),
plot.subtitle = ggtext::element_markdown(color = "grey30", size = 12, lineheight = 1.35, hjust=0.5),
plot.caption = ggtext::element_markdown(color = "grey30", size = 10, lineheight = 1.35, hjust=0.5)
)
if (add_seg) {
expression_limits <- data.frame(
x.start = c(-fc, fc, min(data1$log2FoldChange, na.rm = TRUE)),
x.end = c(-fc, fc, max(data1$log2FoldChange, na.rm = TRUE)),
y.start = c(0, 0, -log10(p_value)),
y.end = c(0.85 * max(-log10(data1$pvalue), na.rm = TRUE),
0.85 * max(-log10(data1$pvalue), na.rm = TRUE),
-log10(p_value))
)
p <- p + ggplot2::geom_segment(data = expression_limits,
aes(x = x.start, xend = x.end,
y = y.start, yend = y.end),
linetype = "dashed")
}
if (table == "on" && !is.null(data2)) {
# Select specific columns
selected_data <- data2[, c("genes", "baseMean", "log2FoldChange", "pvalue", "padj")]
# Define a custom theme for the table
custom_theme <- gridExtra::ttheme_default(
core = list(bg_params = list(fill = "white")),
colhead = list(
fg_params = list(col = "black"),
bg_params = list(fill = "white", col = "#333333", lwd = 1)
)
)
# Create the tableGrob with the custom theme
attention.genes.tbl <- gridExtra::tableGrob(selected_data, rows = NULL, theme = custom_theme)
combined_plot <- p / attention.genes.tbl
return(combined_plot)
} else {
return(p)
}
}
ggvolc(all_genes, attention_genes, add_seg = TRUE, table="on")
genes_table <- function(plot_obj, data2) {
# Check if the input is a ggplot object
if (!inherits(plot_obj, "ggplot")) stop("Input must be a ggplot object")
# Select specific columns
selected_data <- data2[, c("genes", "baseMean", "log2FoldChange", "pvalue", "padj"), drop = FALSE]
# Define a custom theme for the table
custom_theme <- ttheme_default(
core = list(bg_params = list(fill = "white")),
colhead = list(
fg_params = list(col = "black"),
bg_params = list(fill = "white", col = "#333333", lwd = 1)
)
)
# Create the tableGrob with the custom theme
attention.genes.tbl <- tableGrob(selected_data, rows = NULL, theme = custom_theme)
# Combine the two using grid.arrange
combined_plot <- arrangeGrob(plot_obj, attention.genes.tbl, ncol = 1)
return(combined_plot)
}
# Use the pipe to create and combine the plot and the table
combined_plot <- ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance") %>%
genes_table(data2 = attention_genes)
my_plot <- ggvolc(all_genes, attention_genes, add_seg = TRUE) + labs(title="Add segments of significance")
my_plot %>%
genes_table(data2 = attention_genes)
my_plot
my_plot %>%
genes_table(data2 = attention_genes)
plot_obj <- ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance")
plot_obj %>%
genes_table(data2 = attention_genes)
plot_obj %>%
genes_table(data2 = attention_genes)
genes_table <- function(plot_obj, data2) {
# Select specific columns
selected_data <- data2[, c("genes", "baseMean", "log2FoldChange", "pvalue", "padj"), drop = FALSE]
# Define a custom theme for the table
custom_theme <- gridExtra::ttheme_default(
core = list(bg_params = list(fill = "white")),
colhead = list(
fg_params = list(col = "black"),
bg_params = list(fill = "white", col = "#333333", lwd = 1)
)
)
# Create the tableGrob with the custom theme
attention.genes.tbl <- gridExtra::tableGrob(selected_data, rows = NULL, theme = custom_theme)
combined_plot <- plot_obj / attention.genes.tbl
return(combined_plot)
}
plot_obj <- ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add segments of significance")
plot_obj %>%
genes_table(data2 = attention_genes)
usethis::use_r("gene_table")
ggvolc <- function(data1,
data2 = NULL,
size_var = NULL,  # Default value set to NULL
p_value = 0.05,
fc = 1,
not_sig_color = "grey82",
down_reg_color = "#00798c",
up_reg_color = "#d1495b",
add_seg = FALSE){
# Validate input
if(!is.data.frame(data1)) stop("data1 must be a data frame")
if(!is.null(data2) && !is.data.frame(data2)) stop("data2 must be a data frame")
# Calculate the size aesthetic outside ggplot
if(is.null(size_var)) {
data1$size_aes <- 3  # Default size if size_var is NULL
if(!is.null(data2)) data2$size_aes <- 3
size_aes_range <- c(3, 3)
} else if (size_var == "pvalue") {
data1$size_aes <- abs(-log10(data1$pvalue))
if(!is.null(data2)) data2$size_aes <- abs(-log10(data2$pvalue))
size_aes_range <- c(0, 6)
} else {
data1$size_aes <- abs(data1[[size_var]])
if(!is.null(data2)) data2$size_aes <- abs(data2[[size_var]])
size_aes_range <- c(min(abs(data1[[size_var]])), max(abs(data1[[size_var]])))
}
dat1 <- data1 %>%
dplyr::mutate(threshold = factor(case_when(
pvalue < p_value & log2FoldChange > fc ~ "s_upregulated",
pvalue < p_value & log2FoldChange < -fc ~ "s_downregulated",
TRUE ~ "not_significant"
), levels = c("not_significant", "s_downregulated", "s_upregulated")))
if (is.null(data2)) {
dat1.2 <- dat1
} else {
dat1.2 <- dplyr::anti_join(dat1, data2, by="genes")
}
color_mapping <- c("s_downregulated" = down_reg_color,
"not_significant" = not_sig_color,
"s_upregulated" = up_reg_color)
p <- ggplot2::ggplot(dplyr::arrange(dat1.2, threshold)) +
ggplot2::geom_point(aes(x = log2FoldChange, y = -log10(pvalue), color = threshold, size = size_aes),
shape = 16, alpha = 0.5) +
ggplot2::theme_bw() +
ggplot2::labs(title = "Exploring data with ggvolc",
x = "log2FoldChange",
y = "-log10(pvalue)") +
ggplot2::scale_color_manual(
values = color_mapping,
name = "Genes",
breaks = c("s_downregulated", "not_significant", "s_upregulated"),
labels = c("Downregulated", "non-significant", "Upregulated")
)  +
ggplot2::guides(color = ggplot2::guide_legend(override.aes = list(size = 5, alpha=1)))
if (!is.null(data2)) {
data2 <- data2 %>%
dplyr::mutate(threshold = factor(case_when(
pvalue < p_value & log2FoldChange > fc ~ "s_upregulated",
pvalue < p_value & log2FoldChange < -fc ~ "s_downregulated",
TRUE ~ "not_significant"
),levels = c("not_significant", "s_downregulated", "s_upregulated")))
p <- p + ggplot2::geom_point(data = data2, aes(x = log2FoldChange, y = -log10(pvalue),
fill = threshold, size = size_aes),
shape = 21, color = "black") +
ggplot2::scale_fill_manual(
values = color_mapping,
name = "Genes",
breaks = c("s_downregulated", "not_significant", "s_upregulated"),
labels = c("Downregulated", "non-significant", "Upregulated"),
guide = "none"
)
p <- p + ggrepel::geom_text_repel(data = data2,
aes(x = log2FoldChange, y = -log10(pvalue),
label = genes), color = "#333333", fontface="bold",
segment.curvature = -0.4,
segment.alpha = 0.5)
}
if (is.null(size_var)) {
p <- p + scale_size_continuous(guide = "none")  # No legend for size when size_var is NULL
} else {
size_legend_name <- ifelse(size_var == "log2FoldChange", "log2FoldChange", "-log10(pvalue)")
p <- p + scale_size_continuous(name = size_legend_name,
range = size_aes_range) +
guides(size = guide_legend(override.aes = list(shape = 21, fill = NA)))
}
p <- p +
ggplot2::theme_bw() +
ggplot2::theme(
axis.text = ggplot2::element_text(size=14),
axis.text.x = ggplot2::element_text(margin = margin(t = 2.5, r =0, b = 0, l = 0)),
axis.text.y = ggplot2::element_text(margin = margin(t = 0, r =2.5, b = 0, l = 0)),
axis.ticks.length.x = grid::unit(0.25,"cm"),
axis.ticks.length.y = grid::unit(0.25,"cm"),
axis.ticks = ggplot2::element_line(color = "#333333", linewidth= .5),
axis.title = ggplot2::element_text(size=15),
panel.grid.major = ggplot2::element_line(color="grey93"),
panel.grid.minor =ggplot2::element_line(color=NA),
panel.border = ggplot2::element_rect(linewidth = 1, color="#333333"),
legend.title = ggplot2::element_text(hjust=0.5, size=12),
legend.text = ggplot2::element_text(size=10),
plot.title = ggtext::element_markdown(color = "#333333", size = 18, face = "bold", margin = margin(0,0,0.5,0, unit = "cm"), hjust=0.5),
plot.subtitle = ggtext::element_markdown(color = "grey30", size = 12, lineheight = 1.35, hjust=0.5),
plot.caption = ggtext::element_markdown(color = "grey30", size = 10, lineheight = 1.35, hjust=0.5)
)
if (add_seg) {
expression_limits <- data.frame(
x.start = c(-fc, fc, min(data1$log2FoldChange, na.rm = TRUE)),
x.end = c(-fc, fc, max(data1$log2FoldChange, na.rm = TRUE)),
y.start = c(0, 0, -log10(p_value)),
y.end = c(0.85 * max(-log10(data1$pvalue), na.rm = TRUE),
0.85 * max(-log10(data1$pvalue), na.rm = TRUE),
-log10(p_value))
)
p <- p + ggplot2::geom_segment(data = expression_limits,
aes(x = x.start, xend = x.end,
y = y.start, yend = y.end),
linetype = "dashed")
}
return(p)
}
ggvolc(all_genes, attention_genes, add_seg = TRUE, table="on")
ggvolc(all_genes, attention_genes, add_seg = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::install()
usethis::use_namespace()
devtools::install()
plot <- ggvolc(all_genes, attention_genes, add_seg = TRUE) +
labs(title="Add a table with the genes of interest")
plot %>%
genes_table(attention_genes)
devtools::document()
devtools::install()
devtools::check()
usethis::use_import_from("patchwork")
devtools::check()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::check()
